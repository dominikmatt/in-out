<!DOCTYPE html>
<html>
  <head>
    <title>Studio</title>
    <link rel="import" href="bower_components/polymer/polymer.html" />
    <link rel="import" href="bower_components/webaudio-controls/webaudio-controls.html" />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>

    <div id="studio">

      <ul>
        <audiotrack v-for="track in trackList" v-bind:track="track" />
      </ul>

      <button v-on:click="play" class="is-play-btn">Play</button>
      <input id="record" v-on:click="play" type="button" value="RECORD" />
      <input id="stop" type="button" value="STOP" />

      <webaudio-knob src="/bower_components/webaudio-controls/img/LittlePhatty.png"
        value="0.8" min="0" max="1" step="0.01" width="64" height="64" sprites="100"
        tooltip="Pan" id="monitorvolume">
	    </webaudio-knob>

    </div>
    <script src="bower_components/webcomponentsjs/webcomponents-lite.js"></script>
    <script
            src="https://code.jquery.com/jquery-3.1.1.slim.min.js"
            integrity="sha256-/SIrNqv8h6QGKDuNoLGA4iret+kyesCkHGzVUUV0shc="
            crossorigin="anonymous"></script>
    <script src="/bower_components/socket.io-client/socket.io.js"></script>
    <script src="/bower_components/vue/dist/vue.js"></script>
    <script type="application/javascript" src="/js/Socket.js"></script>
    <script type="application/javascript" src="/js/InputManager.js"></script>
    <script type="application/javascript" src="/js/studio.js"></script>
    <script type="application/javascript" src="/js/track.js"></script>
    <script type="text/javascript">

const context = new (window.AudioContext || window.webkitAudioContext)();

var app = new Vue({
  el: '#studio',
  data: {
    trackList: [],
    mixer: new Mixer(context)
  },
  created: function() {
    let mic = new InputManager(context);
    let m = this.mixer;
    let list = this.trackList;

    var addTrack = (item, idx) => {
      let url = 'http://192.168.43.105:9002' + item.url;
      let t = new Track(context, url, item.fileName);
      m.addTrack(item.fileName, t);

      t.init().then(() => {
        list.push(t);
      });
    };

    var removeTrack = (item, idx) => {
      m.removeTrack(item.fileName);
    };

    socket.connection.on('file.all', (data) => {
      console.info('file.all', data);
      data.fileList.map(addTrack);
    });

    socket.connection.on('file.new', (data) => {
      console.info('file.new', data);
      addTrack(data);
    });

    socket.connection.on('file.removed', (data) => {
      console.info('file.removed', data);
      removeTrack(data);
    });

    socket.connection.emit('file.get');
  },
  methods: {
    play: function() {
      this.mixer.play();
    }
  }
});

    </script>

  </body>
</html>

